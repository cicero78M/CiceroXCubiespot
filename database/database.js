const fs = require('fs');

//Google Spreadsheet
const { GoogleSpreadsheet } = require('google-spreadsheet');
const { JWT } = require ('google-auth-library');
const { title } = require('process');

const googleCreds = JSON.parse(fs.readFileSync('./database/ciceroKey.json'));

const googleAuth = new JWT({
  // env var values here are copied from service account credentials generated by google
  // see "Authentication" section in docs for more info
  email: googleCreds.client_email,
  key: googleCreds.private_key,
  scopes: ['https://www.googleapis.com/auth/spreadsheets'],
});


module.exports = {

    newClientOrg: async function newClientOrg(sheetName, sourceID, filesID){

      const sourceX = sourceID.split('/').pop();
      
      const targetDoc = new GoogleSpreadsheet(filesID, googleAuth);

      try {
        const targetSheet = await targetDoc.addSheet({ title: sheetName, headerValues:['ID_KEY', 'NAMA', 'TITLE', 'DIVISI', 'JABATAN', 'STATUS', 'WHATSAPP', 'INSTA', 'TIKTOK'] });
        console.log(targetSheet.title);

      } catch (error) {
        console.log('Sheet Exist');
      }

      const sourceDoc = new GoogleSpreadsheet(sourceX, googleAuth);
      await sourceDoc.loadInfo(); // loads document properties and worksheets

      const sheetSource = sourceDoc.sheetsByTitle[sheetName];
      const rowsSource = await sheetSource.getRows();
      

      await targetDoc.loadInfo(); // loads document properties and worksheets
      const sheetTarget = targetDoc.sheetsByTitle[sheetName];

      var i = 0;  //  set your counter to 1

      function pushDataOrg() { //  create a loop function
        setTimeout(function() { //  call a 3s setTimeout when the loop is called
          sheetTarget.addRow({ID_KEY: rowsSource[i].get('NRP'), NAMA: rowsSource[i].get('NAMA'), TITLE: rowsSource[i].get('PANGKAT'), DIVISI: rowsSource[i].get('SATFUNG'), JABATAN: rowsSource[i].get('JABATAN'), STATUS: true, WHATSAPP: rowsSource[i].get('WHATSAPP'), INSTA: rowsSource[i].get('IG1'), TIKTOK: rowsSource[i].get('TIKTOK')});
          //  post data
          i++;  //  increment the counter
          if (i < rowsSource.length) {  //  if the counter < 10, call the loop function
            pushDataOrg(); //  again which will trigger another 
          } else {
            console.log("All Data Transfered");
          };
        }, 3000)
      }

      pushDataOrg();
    },
    
    newClientCom: async function newClientCom(sheetName, sourceID, filesID){

      const sourceX = sourceID.split('/').pop();      
      const targetDoc = new GoogleSpreadsheet(filesID, googleAuth);

      try {
        const targetSheet = await targetDoc.addSheet({ title: sheetName, headerValues:['ID_KEY', 'NAMA', 'TITLE', 'DIVISI', 'JABATAN', 'STATUS', 'WHATSAPP', 'INSTA', 'TIKTOK'] });
        console.log(targetSheet.title);

      } catch (error) {
        console.log('Sheet Exist');
      }

      const sourceDoc = new GoogleSpreadsheet(sourceX, googleAuth);
      await sourceDoc.loadInfo(); // loads document properties and worksheets

      const sheetSource = sourceDoc.sheetsByTitle[sheetName];
      const rowsSource = await sheetSource.getRows();
      

      await targetDoc.loadInfo(); // loads document properties and worksheets
      const sheetTarget = targetDoc.sheetsByTitle[sheetName];

      var i = 0;  //  set your counter to 1

      function pushDataCom() { //  create a loop function
        setTimeout(function() { //  call a 3s setTimeout when the loop is called
          sheetTarget.addRow({ID_KEY: rowsSource[i].get('ID_KEY'), NAMA: rowsSource[i].get('NAMA'), TITLE: null, DIVISI: rowsSource[i].get('DIVISI'), JABATAN: rowsSource[i].get('JABATAN'), STATUS: true, WHATSAPP: rowsSource[i].get('WHATSAPP'), INSTA: rowsSource[i].get('INSTA'), TIKTOK: rowsSource[i].get('TIKTOK')});
          //  post data
          i++;  //  increment the counter
          if (i < rowsSource.length) {  //  if the counter < 10, call the loop function
            pushDataCom();  //again which will trigger another 
          } else {
            console.log("All Data Transfered");
          };
        }, 3000)
      }

      pushDataCom();
    },
           
  };