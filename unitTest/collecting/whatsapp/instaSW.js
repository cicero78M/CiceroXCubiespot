import { readFileSync } from 'fs';

//Google Spreadsheet
import { GoogleSpreadsheet } from 'google-spreadsheet';
import { JWT } from 'google-auth-library';
import { instaPostInfoAPI, instaPostAPI } from '../../SocialMediaAPI/instaAPI';
import { sheetDoc as _sheetDoc } from '../../queryData/sheetDoc';


const ciceroKey = JSON.parse (readFileSync('ciceroKey.json'));

const googleAuth = new JWT({
  // env var values here are copied from service account credentials generated by google
  // see "Authentication" section in docs for more info
  email: ciceroKey.client_email,
  key: ciceroKey.private_key,
  scopes: ['https://www.googleapis.com/auth/spreadsheets'],
});

export const instaSW = async function waStoryInsta(waNumber, shortcode) {
  console.log(waNumber);

  const waStoryDoc = new GoogleSpreadsheet(ciceroKey.dbKey.waStoryID, googleAuth); //Google Authentication for client DB    

  let instaOfficial;

  if (shortcode !== null) {
    let instaPostResponse = await instaPostInfoAPI(shortcode);

    instaOfficial = instaPostResponse.data.data.user.username;

    let clientResponse = await _sheetDoc(ciceroKey.dbKey.clientDataID, 'ClientData');
    let clientRows = clientResponse.data;

    let hasSheetName = false;
    let clientName;

    for (let i = 0; i < clientRows.length; i++) {
      if (clientRows[i].get('INSTAGRAM') === instaOfficial) {
        hasSheetName = true;
        clientName = clientRows[i].get('CLIENT_ID');
      }
    }

    if (hasSheetName) {

      let responseInstaPost = await instaPostAPI(instaOfficial);

      let instaItems = responseInstaPost.data.data.items;

      let contentItems = [];
      let shortcodeItems = [];

      for (let ii = 0; ii < instaItems.length; ii++) {

        contentItems.push(instaItems[ii]);
        shortcodeItems.push(instaItems[ii].code);

      }

      let userResponse = await _sheetDoc(ciceroKey.dbKey.userDataID, clientName);
      let userRows = userResponse.data;

      let hasUser = false;
      let ID_KEY;

      for (let iii = 0; iii < userRows.length; iii++) {
        if (userRows[iii].get('WHATSAPP') === waNumber.replaceAll("@c.us", "")) {
          ID_KEY = userRows[iii].get('ID_KEY');
          hasUser = true;
        }
      }

      if (hasUser) {

        await waStoryDoc.loadInfo(); // loads document properties and worksheets
        const waStorySheet = waStoryDoc.sheetsByTitle[clientName];

        const waStoryRows = await waStorySheet.getRows();

        let hasShortcode = false;

        for (let iv = 0; iv < waStoryRows.length; iv++) {
          if (waStoryRows[iv].get('SHORTCODE') === shortcode) {

            hasShortcode = true;



            await waStorySheet.loadCells();

            let inputCell;
            for (let v = 1; v < 1500; v++) {

              inputCell = waStorySheet.getCell(iv + 1, v);

              if (inputCell.value === null || inputCell.value === undefined || inputCell.value === "") {

                inputCell.value = ID_KEY;

                await waStorySheet.saveUpdatedCells();

                let responseData = {
                  data: 'Terimakasih sudah berpartisipasi melakukan share konten :\n\nhttps://instagram.com/p/' + shortcode + '\n\nSelalu Semangat ya.',
                  state: true,
                  code: 200
                };

                waStoryDoc.delete;

                return responseData;
              }
            }

            let responseData = {
              data: 'Error Response, Database has existing value',
              state: false,
              code: 303
            };

            waStoryDoc.delete;

            return responseData;
          }
        }

        if (!hasShortcode) {
          let rowData = [shortcode, ID_KEY];

          await waStorySheet.addRow(rowData);

          let responseData = {
            data: 'Terimakasih sudah berpartisipasi melakukan share konten :\n\nhttps://instagram.com/p/' + shortcode + '\n\nSelalu Semangat ya.',
            state: true,
            code: 1
          };

          waStoryDoc.delete;

          return responseData;
        }
      } else {
        let responseData = {
          data: 'Number Not Recorded at User Data Base',
          state: true,
          code: 200
        };

        waStoryDoc.delete;

        return responseData;
      }
    } else {

      let responseData = {
        data: 'No Current Number in Database.',
        state: true,
        code: 200
      };

      waStoryDoc.delete;

      return responseData;

    }
  } //if(url.includes...
} //waStoryInsta....
  ;//module export....