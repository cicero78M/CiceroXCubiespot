//Google Spreadsheet
const { GoogleSpreadsheet } = require ('google-spreadsheet');
const { JWT } = require ('google-auth-library');

const fs = require('fs');
const ciceroKey = JSON.parse (fs.readFileSync('ciceroKey.json'));

const googleAuth = new JWT({
  // env var values here are copied from service account credentials generated by google
  // see "Authentication" section in docs for more info
  email: ciceroKey.client_email,
  key: ciceroKey.private_key,
  scopes: ['https://www.googleapis.com/auth/spreadsheets'],
});

module.exports = {  

    clientDoc: async function clientDoc(clientName) {

        const clientDoc = new GoogleSpreadsheet(ciceroKey.dbKey.clientDataID, googleAuth);//Google Authentication for client DB
        let isClientID = false;
        let instaOfficialAccount;
        let isStatus;

        await clientDoc.loadInfo(); // loads document properties and worksheets
        const clientDataSheet = clientDoc.sheetsByTitle['ClientData'];
        const clientRows = await clientDataSheet.getRows();

        for (let i = 0; i < clientRows.length; i++){
        
        if (clientRows[i].get('CLIENT_ID') === clientName){
        
          isClientID = true;
          instaOfficialAccount = clientRows[i].get('INSTAGRAM');
          isStatus = clientRows[i].get('STATUS');
        
        }
        if(isClientID){

            let data = {
                isClientID : isClientID,
                instaOfficialAccount : instaOfficialAccount,
                isStatus : isStatus,
                code : 200,
                state : true
            }

            clientDoc.delete;

            return data;
        } else {

            let data = {
                
                isClientID : isClientID,
                instaOfficialAccount : instaOfficialAccount,
                isStatus : isStatus,
                code : 200,
                state : true
            }

            clientDoc.delete;

            return data;

        }

        }
      }
        
    }


}