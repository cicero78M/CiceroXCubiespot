const fs = require('fs');
const axios = require('axios');

//Google Spreadsheet
const { GoogleSpreadsheet } = require ('google-spreadsheet');
const { JWT } = require ('google-auth-library');
const { console } = require('inspector');

const googleCreds = JSON.parse (fs.readFileSync('ciceroKey.json'));

const hostContent = 'https://instagram-scraper-api2.p.rapidapi.com/v1.2/posts';
const hostLikes = 'https://instagram-scraper-api2.p.rapidapi.com/v1/likes';

const headers = {
  'x-cache-control': 'no-cache',
  'x-rapidapi-key': 'f667627969msh3bfa806fa07f0c1p15c406jsn47bc847d28d2',
  'x-rapidapi-host': 'instagram-scraper-api2.p.rapidapi.com'
}
const googleAuth = new JWT({
  // env var values here are copied from service account credentials generated by google
  // see "Authentication" section in docs for more info
  email: googleCreds.client_email,
  key: googleCreds.private_key,
  scopes: ['https://www.googleapis.com/auth/spreadsheets'],
});

async function instaPostAPI(host, key){
  //Insta Post API
  let options = {
    method: 'GET',
    url: host,
    params: {
      username_or_id_or_url: key
    },
    headers: headers
  };

  try {
    let response = await axios.request(options);
    return response.data;
  } catch (error) {
    console.error(error);
  }
}

async function instaLikesAPI(host, key){
  //Insta Likes API
  let options = {
    method: 'GET',
    url: host,
    params: {
      code_or_id_or_url: key
    },
    headers: headers
  };

  try {
    let response = await axios.request(options);
    return response.data;
  } catch (error) {
    console.error(error);
  }
}

module.exports = {
  reloadInsta: async function reloadInsta(sheetName, userClientID, clientID, instaOfficialID){

    const d = new Date();
    const localDate = d.toLocaleDateString('id');

    const userClientDoc = new GoogleSpreadsheet(userClientID, googleAuth);//Google Authentication for user client DB
    await userClientDoc.loadInfo(); // loads document properties and worksheets

    const clientDoc = new GoogleSpreadsheet(clientID, googleAuth);//Google Authentication for client DB
    await clientDoc.loadInfo(); // loads document properties and worksheets

    const instaOfficialDoc = new GoogleSpreadsheet(instaOfficialID, googleAuth);//Google Authentication for instaLikes DB
    await instaOfficialDoc.loadInfo(); // loads document properties and worksheets

    //Check Client_ID. then get async data
    let isClientID = false;
    let instaOfficial;
    let isStatus;

    const clientDataSheet = clientDoc.sheetsByTitle['ClientData'];
    const rowsClientData = await clientDataSheet.getRows();

    for (let i = 0; i < rowsClientData.length; i++){
      if (rowsClientData[i].get('CLIENT_ID') === sheetName){
        isClientID = true;
        instaOfficial = rowsClientData[i].get('INSTAGRAM');
        isStatus = rowsClientData[i].get('STATUS');
      }
    }

    // If Client_ID exist. then get official content
    if (isClientID && isStatus){
      //Get Insta Post From Official Account    
      try {
        let response = await instaPostAPI(hostContent, instaOfficial);

        //Collect Content Shortcode from Official Account
        const items = response.data.items;
        let itemByDay = [];
        for (let i = 0; i < items.length; i++){
          let itemDate = new Date(items[i].taken_at*1000);
          if(itemDate.toLocaleDateString('id') === localDate){
            itemByDay.push(items[i]);
          }
        }
        //Collect Shortcode from Database
        let shortcodeList = [];
        const officialInstaSheet = instaOfficialDoc.sheetsByTitle[sheetName];
        const officialInstaData = await officialInstaSheet.getRows();
        for (let i = 0; i < officialInstaData.length; i++){
          if (!shortcodeList.includes(officialInstaData[i].get('SHORTCODE'))){
            shortcodeList.push(officialInstaData[i].get('SHORTCODE'));
          }
        }
        //Check if Database Contains Shortcode Items
        let hasShortcode = false;
        for (let i = 0; i < itemByDay.length; i++){
          if(shortcodeList.includes(itemByDay[i].code)){
            hasShortcode = true;          
          }
        }

        let shortcodeUpdateCounter = 0;
        let shortcodeNewCounter = 0;
        
        //If Database Contains Shortcode 
        if(hasShortcode){
          for (let i = 0; i < itemByDay.length; i++){
            for (let ii = 0; ii < officialInstaData.length; ii++){
              if(officialInstaData[ii].get('SHORTCODE') === itemByDay[i].code){
                //Update Existing Content Database
                officialInstaData[ii].assign({TIMESTAMP: itemByDay[i].taken_at,	USER_ACCOUNT:itemByDay[i].owner.username,	SHORTCODE:itemByDay[i].code, ID: itemByDay[i].id, 
                  TYPE:itemByDay[i].media_name, CAPTION:itemByDay[i].caption.text,	COMMENT_COUNT:itemByDay[i].comment_count,	LIKE_COUNT:itemByDay[i].like_count,	
                  PLAY_COUNT:itemByDay[i].play_count, THUMBNAIL:itemByDay[i].thumbnail_url,	VIDEO_URL:itemByDay[i].video_url	}); // Jabatan Divisi Value
                  await officialInstaData[ii].save(); //save update
                shortcodeUpdateCounter++;
                console.log('Existing Content Updated');
              } else if(!shortcodeList.includes(itemByDay[i].code)){
                //Push New Content to Database 
                shortcodeList.push(itemByDay[i].code);
                officialInstaSheet.addRow({TIMESTAMP: itemByDay[i].taken_at,	USER_ACCOUNT:itemByDay[i].owner.username,	SHORTCODE:itemByDay[i].code, ID: itemByDay[i].id, TYPE:itemByDay[i].media_name, 	
                  CAPTION:itemByDay[i].caption.text,	COMMENT_COUNT:itemByDay[i].comment_count,	LIKE_COUNT:itemByDay[i].like_count,	PLAY_COUNT:itemByDay[i].play_count,
                  THUMBNAIL:itemByDay[i].thumbnail_url,	VIDEO_URL:itemByDay[i].video_url});
                shortcodeNewCounter++;
                console.log('New Content Added');    
              }
            }            
          }
        } else {
          //Push New Shortcode Content to Database
          for (let i = 0; i < itemByDay.length; i++){
            officialInstaSheet.addRow({TIMESTAMP: itemByDay[i].taken_at,	USER_ACCOUNT:itemByDay[i].owner.username,	SHORTCODE:itemByDay[i].code, ID: itemByDay[i].id, TYPE:itemByDay[i].media_name, 	
              CAPTION:itemByDay[i].caption.text,	COMMENT_COUNT:itemByDay[i].comment_count,	LIKE_COUNT:itemByDay[i].like_count,	PLAY_COUNT:itemByDay[i].play_count,
              THUMBNAIL:itemByDay[i].thumbnail_url,	VIDEO_URL:itemByDay[i].video_url});
            shortcodeNewCounter++;
            console.log('New Content Added');
          }
        }
        //Messages Return
        if(shortcodeNewCounter === 0 && shortcodeUpdateCounter === 0 ){
          return 'Reload Insta return with No Content to Update'
        } else if (shortcodeNewCounter != 0 && shortcodeUpdateCounter != 0 ){
          return 'Reload Insta return With '+shortcodeNewCounter+' New Content Added and '+shortcodeUpdateCounter+' Content Updated';
        } else if(shortcodeUpdateCounter != 0  ){
          return 'Reload Insta return With '+shortcodeUpdateCounter+' Content Updated';
        } else if(shortcodeNewCounter != 0 ){
          return 'Reload Insta return With '+shortcodeNewCounter+' New Content Added';
        }

      } catch (error) {
        console.error(error);
        return 'Error, Contacts Developers'
      }
    }  else {
      console.log('Contact Developers for Activate your Client ID');
      return 'Your Client ID has Expired, Contacts Developers for more Informations';
    }
  },
  
  reloadInstaLikes: async function reloadInstaLikes(sheetName, userClientID, clientID, instaOfficialID, instaLikesUsernameID){

    const d = new Date();
    const localDate = d.toLocaleDateString('id');

    const userClientDoc = new GoogleSpreadsheet(userClientID, googleAuth);//Google Authentication for user client DB
    await userClientDoc.loadInfo(); // loads document properties and worksheets

    const clientDoc = new GoogleSpreadsheet(clientID, googleAuth);//Google Authentication for client DB
    await clientDoc.loadInfo(); // loads document properties and worksheets

    const instaOfficialDoc = new GoogleSpreadsheet(instaOfficialID, googleAuth);//Google Authentication for InstaOfficial DB
    await instaOfficialDoc.loadInfo(); // loads document properties and worksheets

    const instaLikesUsernameDoc= new GoogleSpreadsheet(instaLikesUsernameID, googleAuth);//Google Authentication for instaLikes Username DB
    await instaLikesUsernameDoc.loadInfo(); // loads document properties and worksheets

    //Check Client_ID. then get async data
    let isClientID = false;
    let instaOfficial;
    let isStatus;
  
    const clientDataSheet = clientDoc.sheetsByTitle['ClientData'];
    const rowsClientData = await clientDataSheet.getRows();

    for (let i = 0; i < rowsClientData.length; i++){
      if (rowsClientData[i].get('CLIENT_ID') === sheetName){
        isClientID = true;
        instaOfficial = rowsClientData[i].get('INSTAGRAM');
        isStatus = rowsClientData[i].get('STATUS');
      }
    }

    // If Client_ID exist. then get official content
    if (isClientID && isStatus){    
      try {
        //Collect Content Shortcode from Official Account
        let response = await instaPostAPI(hostContent, instaOfficial);
        const items = response.data.items;
        let itemByDay = [];
        for (let i = 0; i < items.length; i++){
          let itemDate = new Date(items[i].taken_at*1000);
          if(itemDate.toLocaleDateString('id') === localDate){
            itemByDay.push(items[i]);
          }
        }
        //Collect Shortcode from Database        
        let shortcodeList = [];
        const officialInstaSheet = instaOfficialDoc.sheetsByTitle[sheetName];
        const officialInstaData = await officialInstaSheet.getRows();
        for (let i = 0; i < officialInstaData.length; i++){
          if (!shortcodeList.includes(officialInstaData[i].get('SHORTCODE'))){
            shortcodeList.push(officialInstaData[i].get('SHORTCODE'));
          }
        }
        //Check if Database Contains Shortcode Items        
        let hasShortcode = false;
        for (let i = 0; i < itemByDay.length; i++){
          if(shortcodeList.includes(itemByDay[i].code)){
            hasShortcode = true;          
          }
        }

        let shortcodeUpdateCounter = 0;
        let shortcodeNewCounter = 0;

        //If Database Contains Shortcode 
        if(hasShortcode){
          for (let i = 0; i < itemByDay.length; i++){
            for (let ii = 0; ii < officialInstaData.length; ii++){
              if(officialInstaData[ii].get('SHORTCODE') === itemByDay[i].code){
                //Update Existing Content Database                
                officialInstaData[ii].assign({TIMESTAMP: itemByDay[i].taken_at,	USER_ACCOUNT:itemByDay[i].owner.username,	SHORTCODE:itemByDay[i].code, ID: itemByDay[i].id, 
                  TYPE:itemByDay[i].media_name, CAPTION:itemByDay[i].caption.text,	COMMENT_COUNT:itemByDay[i].comment_count,	LIKE_COUNT:itemByDay[i].like_count,	
                  PLAY_COUNT:itemByDay[i].play_count, THUMBNAIL:itemByDay[i].thumbnail_url,	VIDEO_URL:itemByDay[i].video_url	}); // Jabatan Divisi Value
                  await officialInstaData[ii].save(); //save update
                shortcodeUpdateCounter++;
                console.log('Existing Content Updated');
              } else if(!shortcodeList.includes(itemByDay[i].code)){
                //Push New Content to Database  
                shortcodeList.push(itemByDay[i].code);
                officialInstaSheet.addRow({TIMESTAMP: itemByDay[i].taken_at,	USER_ACCOUNT:itemByDay[i].owner.username,	SHORTCODE:itemByDay[i].code, ID: itemByDay[i].id, TYPE:itemByDay[i].media_name, 	
                  CAPTION:itemByDay[i].caption.text,	COMMENT_COUNT:itemByDay[i].comment_count,	LIKE_COUNT:itemByDay[i].like_count,	PLAY_COUNT:itemByDay[i].play_count,
                  THUMBNAIL:itemByDay[i].thumbnail_url,	VIDEO_URL:itemByDay[i].video_url});  
                shortcodeNewCounter++;
                console.log('New Content Added');    
              }
            }            
          }
        } else {
          //Push New Shortcode Content to Database
          for (let i = 0; i < itemByDay.length; i++){
            officialInstaSheet.addRow({TIMESTAMP: itemByDay[i].taken_at,	USER_ACCOUNT:itemByDay[i].owner.username,	SHORTCODE:itemByDay[i].code, ID: itemByDay[i].id, TYPE:itemByDay[i].media_name, 	
              CAPTION:itemByDay[i].caption.text,	COMMENT_COUNT:itemByDay[i].comment_count,	LIKE_COUNT:itemByDay[i].like_count,	PLAY_COUNT:itemByDay[i].play_count,
              THUMBNAIL:itemByDay[i].thumbnail_url,	VIDEO_URL:itemByDay[i].video_url});
            shortcodeNewCounter++;
            console.log('New Content Added');
          }
        }
        let instaLikesUsernameSheet = await instaLikesUsernameDoc.sheetsByTitle[sheetName];
        let instaLikesUsernameData = await instaLikesUsernameSheet.getRows();
        console.log(instaLikesUsernameData);

        for (let i = 0; i < shortcodeList.length; i++){
          let hasShortcode = false;
          //code on the go
          for (let ii = 0; ii < instaLikesUsernameData.length; ii++){
            if (instaLikesUsernameData[ii].get('SHORTCODE') === shortcodeList[i]){
              hasShortcode = true;
              console.log(instaLikesUsernameData[ii]);
            }
          }

          //Final Code
          if(!hasShortcode){
            //If Shortcode doesn't exist push new data
            let responseLikes = await instaLikesAPI(hostLikes, shortcodeList[i]);
            let likesItems = responseLikes.data.items;
            let userNameList = [shortcodeList[i]];

            for (let iii = 0; iii < likesItems.length; iii++){
              userNameList.push(likesItems[iii].username);             
            }

            //Add new Row
            await instaLikesUsernameSheet.addRow(userNameList);
            console.log('Added : '+shortcodeList[i]);
            return 'OK';
          }
        }
      } catch (error) {
        console.error(error);
        return 'Error, Contacts Developers'
      }
    }  else {
      console.log('Contact Developers for Activate your Client ID');
      return 'Your Client ID has Expired, Contacts Developers for more Informations';
    }     
  },
}