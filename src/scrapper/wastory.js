const fs = require('fs');
const axios = require('axios');

//Google Spreadsheet
const { GoogleSpreadsheet } = require ('google-spreadsheet');
const { JWT } = require ('google-auth-library');

const googleCreds = JSON.parse (fs.readFileSync('ciceroKey.json'));
const instaKey = JSON.parse (fs.readFileSync('instaKey.json'));

const googleAuth = new JWT({
  // env var values here are copied from service account credentials generated by google
  // see "Authentication" section in docs for more info
  email: googleCreds.client_email,
  key: googleCreds.private_key,
  scopes: ['https://www.googleapis.com/auth/spreadsheets'],
});

const headers = {
  'x-cache-control': 'no-cache',
  'x-rapidapi-key': instaKey.instakeyAPI,
  'x-rapidapi-host': instaKey.instahostAPI
}

async function instaPostInfoAPI(key){
  //Insta Post API
  let options = {
    method: 'GET',
    url: instaKey.instapostInfo,
    params: {
      code_or_id_or_url: key,
      include_insights: 'false'},
    headers: headers
  };

  try {
    let response = await axios.request(options);
    return response.data;
  } catch (error) {
    console.log(error);
  }
}

async function instaPostAPI(key){
  //Insta Post API
  let options = {
    method: 'GET',
    url: instaKey.instahostContent,
    params: {
      username_or_id_or_url: key
    },
    headers: headers
  };

  try {
    let response = await axios.request(options);
    return response.data;
  } catch (error) {
    return 'error';
  }
}

module.exports = {

  waStoryInsta: async function waStoryInsta(whatsapp, instalink, userClientID, clientID, waStoryID){
    console.log(whatsapp);
    const userClientDoc = new GoogleSpreadsheet(userClientID, googleAuth);//Google Authentication for user client DB
    await userClientDoc.loadInfo(); // loads document properties and worksheets

    const clientDoc = new GoogleSpreadsheet(clientID, googleAuth);//Google Authentication for client DB
    await clientDoc.loadInfo(); // loads document properties and worksheets

    const waStoryDoc = new GoogleSpreadsheet(waStoryID, googleAuth);//Google Authentication for client DB
    await waStoryDoc.loadInfo(); // loads document properties and worksheets
    
    let insta = instalink[0];

    if(insta.includes('instagram.com')){
      let shortcode;

      if (insta.includes('/?')){
        let instaAsk = insta.replaceAll('/?', '?');
        let instaUrl = instaAsk.split('?')[0];
        shortcode = instaUrl.split('/').pop();
      } else if (insta.includes('?')){
        let instaUrl = insta.split('?')[0];
        shortcode = instaUrl.split('/').pop();
      } else {
        shortcode = insta.split('/').pop();
      }


      let instaOfficial;
      
      if (shortcode !== null){
        let instaPost = await instaPostInfoAPI(shortcode);
        instaOfficial = instaPost.data.user.username;

        const clientDataSheet = clientDoc.sheetsByTitle['ClientData'];
        const rowsClientData = await clientDataSheet.getRows();

        let hasSheetName = false;
        let sheetName;
        
        for (let i = 0; i < rowsClientData.length; i++){
          if (rowsClientData[i].get('INSTAGRAM') === instaOfficial){
            hasSheetName = true;
            sheetName = rowsClientData[i].get('CLIENT_ID');
          }
        }
        
        console.log(sheetName);

        if(hasSheetName){

          let response = await instaPostAPI(instaOfficial);

          const items = response.data.items;
          let hasContent = false;
          let contentItems = [];
          let shortcodeItems = [];

          for (let ii = 0; ii < items.length; ii++){
            
              hasContent = true;
              contentItems.push(items[ii]);
              shortcodeItems.push(items[ii].code);

          }

          let userClientSheet = await userClientDoc.sheetsByTitle[sheetName];
          let userClientData = await userClientSheet.getRows();
          let hasUser = false;
          let ID_KEY;

          for (let iii = 0; iii < userClientData.length; iii++){
            if(userClientData[iii].get('WHATSAPP') === whatsapp.replaceAll("@c.us", "")){
              ID_KEY = userClientData[iii].get('ID_KEY');
              hasUser = true;
            }
          }

          if(hasUser){

            const waStorySheet = await waStoryDoc.sheetsByTitle[sheetName];
            waStorySheet.resize({rowCount:1000 , columnCount : 1501});
            const waStoryData = await waStorySheet.getRows();
            let hasShortcode = false;

            for (let iv = 0; iv < waStoryData.length; iv++){
              if (waStoryData[iv].get('SHORTCODE') === shortcode){
                hasShortcode = true;
                await waStorySheet.loadCells();
                console.log(waStorySheet.getCell(iv+1, 0));
                let inputCell;
                for (let v = 1; v < 1500; v++){

                  inputCell = waStorySheet.getCell(iv+1, v);
                  
                  if ( inputCell.value === null || inputCell.value === undefined || inputCell.value === ""){
                    console.log(inputCell.value);

                    inputCell.value = ID_KEY;
                    await waStorySheet.saveUpdatedCells();

                    let responseData = {
                      message : 'Terimakasih sudah berpartisipasi melakukan share konten :\n\n'+insta+'\n\nSelalu Semangat ya.',
                      state : true,
                      code : 1
                    }
                    return responseData;
                  }
                }

                    let responseData = {
                      message : 'Error Response, Database has existing value',
                      state : false,
                      code : 0
                    }
                    return responseData;              }
            }
            
            if(!hasShortcode){
              let rowData = [shortcode, ID_KEY];

              await waStorySheet.addRow(rowData);
              let responseData = {
                message : 'Terimakasih sudah berpartisipasi melakukan share konten :\n\n'+insta+'\n\nSelalu Semangat ya.',
                state : true,
                code : 1

              }
              return responseData;
            }
          } else {
            let responseData = {
              message : 'Number Not Recorded',
              state : false,
              code : 0
            }
            return responseData;        
          }
        } else {
          let responseData = {
            message : 'No Current Number in Database.',
            state : false,
            code : 0

          }
          return responseData;
        }
      } 
    }//if(url.includes...
  }//waStoryInsta....
}//module export....