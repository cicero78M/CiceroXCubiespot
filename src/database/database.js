const fs = require('fs');

const addHeader = require('./sheetProperties');

//Google Spreadsheet
const { GoogleSpreadsheet } = require ('google-spreadsheet');
const { JWT } = require ('google-auth-library');

const googleCreds = JSON.parse (fs.readFileSync('ciceroKey.json'));

const googleAuth = new JWT({
  // env var values here are copied from service account credentials generated by google
  // see "Authentication" section in docs for more info
  email: googleCreds.client_email,
  key: googleCreds.private_key,
  scopes: ['https://www.googleapis.com/auth/spreadsheets'],
});

module.exports = {
  
  //Add New Client to Database Client ID  
  addClient: async function addClient(sheetName, type, insta, tiktok, clientID, instaOfficialID, instaLikesUsernameID){

    let instaLink = insta.replaceAll('/profilecard/','').split('/').pop();      //Get Last Segment of Links
    let tiktokLink = tiktok.split('/').pop();      //Get Last Segment of Links
    console.log(sheetName+' / '+ type+' / '+instaLink+' / '+tiktokLink);
    try {
      const clientDoc = new GoogleSpreadsheet(clientID, googleAuth);//Google Auth

      //Insert New Sheet
      await clientDoc.loadInfo(); // loads document properties and worksheets
      const clientSheet = clientDoc.sheetsByTitle['ClientData'];
      const clientData = await clientSheet.getRows();

      let isClient = false;
      let clientState;

      for (let i = 0; i < clientData.length; i++){
        if(clientData[i].get('CLIENT_ID') === sheetName){
          isClient = true;
          clientState = clientData[i].get('STATUS')
        }
      }

      if (!isClient){
        if (['COM', 'RES'].includes(type)){
          clientSheet.addRow({CLIENT_ID: sheetName, TYPE: type, STATUS: true, INSTAGRAM: instaLink, TIKTOK: tiktokLink});

          await addHeader.headerData(sheetName, instaOfficialID, instaLikesUsernameID);
          
          
          let responseData = {
            message : 'Client DataBase for '+sheetName+' Created, with header properties',
            state : true,
            code : 1
          }
          
          clientDoc.delete;

          console.log('Return Success');

          return responseData;

        } else {

          let responseData = {
            message : 'Client type does\'nt Match requirements',
            state : true,
            code : 1
          }

          console.log('Return Success');

          clientDoc.delete;

          return responseData;

        }
      } else {

        let responseData = {
          message : 'Client is exist with status : '+clientState,
          state : true,
          code : 1
        }

        console.log('Return Success');

        clientDoc.delete;

        return responseData;

      }

    } catch (error) {
      //if sheet name is exist
      
      let responseData = {
        message : error,
        state : false,
        code : 0
      }
      console.log('Return Success');

      
      return responseData;    }
  },  

  //Set Client State to Database Client ID  
  setClientState: async function setClientState(sheetName, state, filesID){

    const targetDoc = new GoogleSpreadsheet(filesID, googleAuth);//Google Auth
    
    try {
      //Insert New Sheet
      await targetDoc.loadInfo(); // loads document properties and worksheets
      const sheetTarget = targetDoc.sheetsByTitle['ClientData'];
      const clientData = await sheetTarget.getRows();

      let isDataExist = false;

      for (let i = 0; i < clientData.length; i++){
        if (clientData[i].get('CLIENT_ID') === sheetName){
          isDataExist = true;
          clientData[i].assign({STATUS: state});; // Updae State Value
          await clientData[i].save(); //save update

          let responseData = {
            message : 'Client State with Client_ID : '+sheetName+' set status to : '+state,
            state : true,
            code : 1
          }
        
          console.log('Return Success');

          targetDoc.delete;

          return responseData;
        }
      }
      if(!isDataExist){

        let responseData = {
          message : 'No Data with Client_ID : '+sheetName,
          state : true,
          code : 1
        }
      
        console.log('Return Success');

        targetDoc.delete;

        return responseData;
      
      }
    } catch (error) {
      
      let responseData = {
        message : error,
        state : false,
        code : 0
      }

      console.log('Return Success');

      targetDoc.delete;

      return responseData;
    }
  },  
  
  //New Client Database by Organizations Source Functions
  newClientRes: async function newClientRes(sheetName, sourceID, filesID){

    const sourceX = sourceID.split('/').pop(); //Get Last Segment of Links    
    const targetDoc = new GoogleSpreadsheet(filesID, googleAuth); //Google Auth

    try {
      //Insert New Sheet
      const targetSheet = await targetDoc.addSheet({ title: sheetName, headerValues:['ID_KEY', 'NAMA', 'TITLE', 'DIVISI', 'JABATAN', 'STATUS', 
        'WHATSAPP', 'INSTA', 'TIKTOK'] });
      console.log(targetSheet.title);

      const sourceDoc = new GoogleSpreadsheet(sourceX, googleAuth); //Google Auth
      await sourceDoc.loadInfo(); // loads document properties and worksheets

      const sheetSource = sourceDoc.sheetsByTitle[sheetName]; //Get Source Sheet Documents by Title
      const rowsSource = await sheetSource.getRows(); //Get Sheet data By Rows
      
      await targetDoc.loadInfo(); // loads document properties and worksheets
      const sheetTarget = targetDoc.sheetsByTitle[sheetName]; //Get Target Sheet Documents by Title

      var userData = [];

      for (let i = 0; i < rowsSource.length; i++){

        userData.push({ID_KEY: rowsSource[i].get('NRP'), NAMA: rowsSource[i].get('NAMA'), TITLE: rowsSource[i].get('PANGKAT'), 
          DIVISI: rowsSource[i].get('SATFUNG'), JABATAN: rowsSource[i].get('JABATAN'), STATUS: true, WHATSAPP: rowsSource[i].get('WHATSAPP'), 
          INSTA: rowsSource[i].get('IG1'), TIKTOK: rowsSource[i].get('TIKTOK')});

      }

      await sheetTarget.addRows(userData);

      let responseData = {
        message : 'Adding '+sheetName+ ' as Client, and post user data to DB Client',
        state : true,
        code : 1
      }

      console.log('Return Success');

      targetDoc.delete;

      return responseData;

    } catch (error) {

      let responseData = {
        message : error,
        state : false,
        code : 0
      }

      console.log('Return Success');

      targetDoc.delete;

      return responseData;
    
    }
  },

  //New Client Database by Company Source Functions  
  newClientCom: async function newClientCom(sheetName, sourceID, filesID){

    const sourceX = sourceID.split('/').pop();      //Get Last Segment of Links
    const targetDoc = new GoogleSpreadsheet(filesID, googleAuth);//Google Auth
    await targetDoc.loadInfo(); // loads document properties and worksheets

    try {
      //Insert New Sheet
      const targetSheet = await targetDoc.addSheet({ title: sheetName, headerValues:['ID_KEY', 'NAMA', 'TITLE', 'DIVISI', 'JABATAN', 'STATUS', 
        'WHATSAPP', 'INSTA', 'TIKTOK'] });
      console.log(targetSheet.title);

      const sourceDoc = new GoogleSpreadsheet(sourceX, googleAuth); //Google Auth
      await sourceDoc.loadInfo(); // loads document properties and worksheets

      const sheetSource = sourceDoc.sheetsByTitle[sheetName]; //Get Source Sheet Documents by Title
      const rowsSource = await sheetSource.getRows(); // loads document properties and worksheets
      
      const sheetTarget = targetDoc.sheetsByTitle[sheetName];//Get Target Sheet Documents by Title

      var userData = [];

      for (let i = 0; i < rowsSource.length; i++){

        userData.push({ID_KEY: rowsSource[i].get('ID_KEY'), NAMA: rowsSource[i].get('NAMA'), TITLE: null, DIVISI: rowsSource[i].get('DIVISI'), 
          JABATAN: rowsSource[i].get('JABATAN'), STATUS: true, WHATSAPP: rowsSource[i].get('WHATSAPP'), INSTA: rowsSource[i].get('INSTA'), 
          TIKTOK: rowsSource[i].get('TIKTOK')});

      }

      await sheetTarget.addRows(userData);

      let responseData = {
        message : 'Adding '+sheetName+ ' as Client, and post user data to DB Client',
        state : true,
        code : 1
      }

      console.log('Return Success');

      sourceDoc.delete;
      targetDoc.delete;

      return responseData;

    } catch (error) {

      let responseData = {
        message : error,
        state : false,
        code : 0
      }

      console.log('Return Success');

      targetDoc.delete;

      return responseData;

    }
  },

  //Add New User to Client Data Base Functions  
  addUser: async function addUser(sheetName, idKey, userName, userDiv, userJab, userTitle, filesID){
    const targetDoc = new GoogleSpreadsheet(filesID, googleAuth);//Google Auth
    try {
      //Insert New Sheet
      await targetDoc.loadInfo(); // loads document properties and worksheets
      const sheetTarget = targetDoc.sheetsByTitle[sheetName];

      const rowsData = await sheetTarget.getRows();

      let idKeyList = [];

      //Collect ID_KEY List String
      for (let ix = 0; ix < rowsData.length; ix++){
        if(!idKeyList.includes(rowsData[ix].get('ID_KEY'))){
          idKeyList.push(rowsData[ix].get('ID_KEY'));
        }
      }
      
      let divisiList = [];

      //Collect Divisi List String
      for (let i = 0; i < rowsData.length; i++){
        if(!divisiList.includes(rowsData[i].get('DIVISI'))){
          divisiList.push(rowsData[i].get('DIVISI'));
        }
      }
      if(divisiList.includes(userDiv)){
        if (!idKeyList.includes(idKey)){

          //Get Target Sheet Documents by Title
          sheetTarget.addRow({ID_KEY: idKey, NAMA: userName, TITLE: userTitle, DIVISI: userDiv, JABATAN: userJab, STATUS: true});

          let responseData = {
            message : 'Success Input Data, untuk melihat data anda saat ini balas pesan dengan: Client#myData#ID_Key',
            state : true,
            code : 1
          }
          
          console.log('Return Success');

          targetDoc.delete;

          return responseData;
        
        } else {

          let responseData = {
            message : 'ID_Key is Exist, Try Another ID_Key',
            state : true,
            code : 1
          }
          
          console.log('Return Success');

          targetDoc.delete;

          return responseData;

        }
      } else {

        let responseData = {
          message : 'Divisi Tidak Terdaftar',
          state : true,
          code : 1
        }

        console.log('Return Success');

        targetDoc.delete;

        return responseData;

      }
    } catch (error) {

      let responseData = {
        message : error,
        state : false,
        code : 0
      }

      console.log('Return Success');

      targetDoc.delete;

      return responseData;

    }
  },
  //Edit User Divisi to Client Data Base Functions  
  editDivisi: async function editDivisi(sheetName, idKey, userDiv, phone, filesID){
    const targetDoc = new GoogleSpreadsheet(filesID, googleAuth);//Google Auth
    try {
      //Insert New Sheet
      await targetDoc.loadInfo(); // loads document properties and worksheets
      const sheetTarget = targetDoc.sheetsByTitle[sheetName];

      const rowsData = await sheetTarget.getRows();

      let isDataExist = false;

      let divisiList = [];
  
      //Collect Divisi List String
      for (let i = 0; i < rowsData.length; i++){
        if(!divisiList.includes(rowsData[i].get('DIVISI'))){
          divisiList.push(rowsData[i].get('DIVISI'));
        }
      }

      if (divisiList.includes(userDiv)){
        for (let ii = 0; ii < rowsData.length; ii++){
          if (rowsData[ii].get('ID_KEY') === idKey){

            isDataExist = true;
            rowsData[ii].assign({DIVISI: userDiv, WHATSAPP: phone});; // Update Divisi Value
            await rowsData[ii].save(); //save update
        
            let responseData = {
              message : 'Data Updated, untuk melihat data anda saat ini balas pesan dengan: Client#myData#ID_Key',
              state : true,
              code : 1
            }

            console.log('Return Success');

            targetDoc.delete;

            return responseData;
    
          }
        }

        if(!isDataExist){
                
          let responseData = {
            message : 'User Data with delegated ID_KEY Doesn\'t Exist',
            state : true,
            code : 1
          }
          console.log('Return Success');

          targetDoc.delete;

          return responseData;
        }
      } else {

        let responseData = {
          message : 'Divisi Unregsitered',
          state : true,
          code : 1
        }

        console.log('Return Success');

        targetDoc.delete;

        return responseData;
      }
    } catch (error) {

      let responseData = {
        message : error,
        state : false,
        code : 0
      }

      console.log('Return Success');

      targetDoc.delete;

      return responseData;
    
    }
  },

  //Edit User Jabatan to Client Data Base Functions  
  editJabatan: async function editJabatan(sheetName, idKey, userJab, phone, filesID){

    const targetDoc = new GoogleSpreadsheet(filesID, googleAuth);//Google Auth
    try {
      //Insert New Sheet
      await targetDoc.loadInfo(); // loads document properties and worksheets
      const sheetTarget = targetDoc.sheetsByTitle[sheetName];

      const rowsData = await sheetTarget.getRows();

      let isDataExist = false;

      for (let i = 0; i < rowsData.length; i++){
        if (rowsData[i].get('ID_KEY') === idKey){
          
          isDataExist = true;
          rowsData[i].assign({JABATAN: userJab, WHATSAPP: phone});; // Jabatan Divisi Value
          await rowsData[i].save(); //save update

          let responseData = {
            message : 'Data Updated, untuk melihat data anda saat ini balas pesan dengan: Client#myData#ID_Key',
            state : true,
            code : 1
          }
      
          console.log('Return Success');

          targetDoc.delete;

          return responseData;
      
        }
      }

      if(!isDataExist){
        
        let responseData = {
          message : 'User Data with delegated ID_KEY Doesn\'t Exist',
          state : true,
          code : 1
        }
        
        console.log('Return Success');

        targetDoc.delete;

        return responseData;
      
      }    
    } catch (error) {

      let responseData = {
        message : error,
        state : false,
        code : 0
      }
      
      console.log('Return Success');

      targetDoc.delete;

      return responseData;

    }
  },

  //Edit User Jabatan to Client Data Base Functions  
  editNama: async function editNama(sheetName, idKey, userNama, phone, filesID){

    const targetDoc = new GoogleSpreadsheet(filesID, googleAuth);//Google Auth
    try {
      //Insert New Sheet
      await targetDoc.loadInfo(); // loads document properties and worksheets
      const sheetTarget = targetDoc.sheetsByTitle[sheetName];

      const rowsData = await sheetTarget.getRows();

      let isDataExist = false;

      for (let i = 0; i < rowsData.length; i++){
        if (rowsData[i].get('ID_KEY') === idKey){

          isDataExist = true;
          rowsData[i].assign({NAMA: userNama, WHATSAPP: phone});; // Update Divisi Value
          await rowsData[i].save(); //save update
          
          let responseData = {
            message :  'Data Updated, untuk melihat data anda saat ini balas pesan dengan: Client#myData#ID_Key',
            state : true,
            code : 1
          }
      
          console.log('Return Success');

          targetDoc.delete;

          return responseData;
        
        }
      }

      if(!isDataExist){
      
        let responseData = {
          message : 'User Data with delegated ID_KEY Doesn\'t Exist',
          state : true,
          code : 1
        }
      
        console.log('Return Success');

        targetDoc.delete;

        return responseData;

      }
      
    } catch (error) {

      let responseData = {
        message : error,
        state : false,
        code : 0
      }
      
      console.log('Return Success');

      targetDoc.delete;

      return responseData;

    }
  },

  //Edit User Jabatan to Client Data Base Functions  
  updateInsta: async function updateInsta(sheetName, idKey, insta, phone, filesID){
    
    const userLink = insta.replaceAll('/profilecard/','').split('/').pop();      //Get Last Segment of Links
    const targetDoc = new GoogleSpreadsheet(filesID, googleAuth);//Google Auth
    
    try {
      //Insert New Sheet
      await targetDoc.loadInfo(); // loads document properties and worksheets
      const sheetTarget = targetDoc.sheetsByTitle[sheetName];

      const rowsData = await sheetTarget.getRows();

      let isDataExist = false;
      let instaList = [];
  
      //Collect Divisi List String
      for (let i = 0; i < rowsData.length; i++){
        if(!instaList.includes(rowsData[i].get('INSTA'))){
          instaList.push(rowsData[i].get('INSTA'));
        }
      }

      if(!instaList.includes(userLink)){
        for (let i = 0; i < rowsData.length; i++){
          if (rowsData[i].get('ID_KEY') === idKey){

            isDataExist = true;
            rowsData[i].assign({INSTA: userLink, WHATSAPP: phone}); // Update Insta Value
            await rowsData[i].save(); //save update

            let responseData = {
              message : 'Data Updated, untuk melihat data anda saat ini balas pesan dengan: Client#myData#ID_Key',
              state : true,
              code : 1
            }

            console.log('Return Success');

            targetDoc.delete;

            return responseData;
          }
        }
      } else {

        isDataExist = true;
        
        let responseData = {
          message : 'Username Instagram is Used by another User',
          state : true,
          code : 1
        }

        console.log('Return Success');

        targetDoc.delete;

        return responseData;
      
      }

      if(!isDataExist){

        let responseData = {
          message : 'User Data with delegated ID_KEY Doesn\'t Exist',
          state : true,
          code : 1
        }

        console.log('Return Success');

        targetDoc.delete;
        
        return responseData;

      }
    } catch (error) {

      let responseData = {
        message : error,
        state : false,
        code : 0
      }

      console.log('Return Success');

      targetDoc.delete;

      return responseData;
    
    }
  },

  //Edit User Jabatan to Client Data Base Functions  
  updateTiktok: async function updateTiktok(sheetName, idKey, tiktok, phone, filesID){
    
    const userLink = tiktok.split('/').pop();      //Get Last Segment of Links
    const targetDoc = new GoogleSpreadsheet(filesID, googleAuth);//Google Auth

    try {
      //Insert New Sheet
      await targetDoc.loadInfo(); // loads document properties and worksheets

      const sheetTarget = targetDoc.sheetsByTitle[sheetName];
      const rowsData = await sheetTarget.getRows();

      let isDataExist = false;
      let tiktokList = [];
  
      //Collect Divisi List String
      for (let i = 0; i < rowsData.length; i++){
        if(!tiktokList.includes(rowsData[i].get('TIKTOK'))){
          tiktokList.push(rowsData[i].get('TIKTOK'));
        }
      }
    
      if(!tiktokList.includes(userLink)){
        for (let i = 0; i < rowsData.length; i++){
          if (rowsData[i].get('ID_KEY') === idKey){

            isDataExist = true;
            rowsData[i].assign({TIKTOK: userLink, WHATSAPP: phone}); // Update Insta Value
            await rowsData[i].save(); //save update

            let responseData = {
              message: 'Data Tiktok Updated, untuk melihat data anda saat ini balas pesan dengan: Client#myData#ID_Key ',
              state : true,
              code : 1
            }

            console.log('Return Success');

            targetDoc.delete;

            return responseData;
          
          }
        }
      } else {
        
        isDataExist = true;
        let responseData = {
          message: 'Username Tiktok is Used by another User',
          state : true,
          code : 1
        }

        console.log('Return Success');

        targetDoc.delete;

        return responseData;
      }

      if(!isDataExist){

        let responseData = {
          message: 'User Data with delegated ID_KEY Doesn\'t Exist',
          state : true,
          code : 1
        }
        console.log('Return Success');

        targetDoc.delete;

        return responseData;
      }
    } catch (error) {

      let responseData = {
        message : error,
        state : false,
        code : 0
      }
      console.log('Return Success');

      targetDoc.delete;

      return responseData;
    
    }
  },
};